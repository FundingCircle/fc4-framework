#!/usr/bin/env bash
## Run this from <project-root>/tool/

# This script packages up the tool into a JAR file. That’s *almost* all we need to distribute, but
# in fact we have another script (pkg-all) that creates a .tar.gz file containing the JAR file, a
# README with installation instructions, and a shell script for launching the tool (so that users
# don’t have to invoke `java` directly but also to give us an opportunity to set some important Java
# system properties).

set -eu

# We don’t want this source tree src/test_utils to be included in the set of
# source files that will be compiled, mainly because they can only compile
# successfully if certain test dependencies are included, such as eftest and
# cloverage. We don’t want those dependencies to be included in the deployment
# artifact (uberjar) because they’d wastefully inflate its size, so right now,
# unless and until we modify Cambada or switch to a different tool for building
# the uberjar, this hack suffices.
tmp_src_dir=$(mktemp -d)
mv src/test_utils "$tmp_src_dir/"
trap 'mv $tmp_src_dir/test_utils src/' EXIT

# clojure automatically downloads deps if necessary. If this is running in CI,
# however, then hopefully the set of dependencies needed to build this uberjar
# have already been restored from a cache. See also ./download-pkg-deps
clojure -A:uberjar

target_dir="target/pkg"
target_path="$target_dir/fc4.jar"

mkdir -p $target_dir
mv target/tool-1.0.0-SNAPSHOT-standalone.jar "$target_path"

echo "Successfully created $target_path"
