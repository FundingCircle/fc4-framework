#!/bin/bash

set -eu

# This script makes CircleCI halt the current job without failing if the paths passed as an argument
# haven't changed.
#
# Example usage:
# .circleci/bin/halt-if-unchanged path/to/dir1 path/to/dir2
#
# For reference:
#
# * https://gist.github.com/naesheim/18d0c0a58ee61f4674353a2f4cf71475#gistcomment-2800831
# * https://discuss.circleci.com/t/ability-to-return-successfully-from-a-job-before-completing-all-the-next-steps/12969/4

# 0. Exit on main, because we never skip any steps on main.
if [[ $CIRCLE_BRANCH == 'main' ]]; then
  exit 0
fi

# 1. Get all the arguments of the script
# https://unix.stackexchange.com/a/197794
PATHS=("$@")

# 2. Make sure the paths to search are not empty
if [[ -z "${PATHS[*]}" ]]; then
  echo "Please provide the paths to check."
  echo "Example usage:"
  echo ".circleci/bin/halt-if-unchanged path/to/dir1 path/to/dir2"
  exit 1
fi

# 3. Produce a diff of the current commit against main, but using only the specified paths
# Note that we’re diffing against origin/main rather than just main. That’s because of some oddness
# I’ve observed when this script is running within CircleCI, after their `checkout` step has run. It
# seems as though, for some bizarre reason, the tip of the local branch `main` is set to the same
# commit as the branch that’s being tested — even though that’s jsut totally wrong. Bizarre, I don’t
# know. Anyway, specifying that we want to compare against origin/main seems work around that issue.
DIFF=$(git diff origin/main HEAD "${PATHS[@]}" 2>&1)

if [[ -z "$DIFF" ]]; then
  echo "Halting this CI job because no files under the specified paths have changed in this branch."
  circleci step halt
else
  echo "NOT halting this CI job because at least one file under the specified paths has changed in this branch."
fi
