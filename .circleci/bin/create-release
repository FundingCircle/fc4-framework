#!/bin/bash

# This is meant to be run within the CircleCI job “Publish dist pkg”

set -eu

if [[ $CIRCLE_BRANCH == 'master' ]]; then
  # Tag has build num suffix in case we do multiple releases on a given day.
  GIT_HEAD_SHA=${CIRCLE_SHA1:0:7}
  VERSION="$(date "+%Y.%m.%d")-${GIT_HEAD_SHA}"
  TAG="release_${VERSION}"

  PRERELEASE=''
  RECREATE=''
else
  # We need this to be the same across all builds for a branch so we only ever keep the
  # latest tag+release for a given branch, or we’d have way too many tags+branches.
  TAG="prerelease_${CIRCLE_BRANCH}"

  # It’s common in shell scripts to leave variables undefined in cases like this, but in this script
  # we’ve set -u above which will cause the script to fail if an undefined variable is referenced.
  PRERELEASE='-prerelease'
  RECREATE='-recreate'
fi

# Docs for ghr’s options: https://github.com/tcnksm/ghr/#options
#
# If you’re not a shell-script guru, you might be wondering why $PRERELEASE and $RECREATE are not
# wrapped in double-quotes below in order to prevent splitting etc. It’s because if we do wrap them,
# and they’re empty, then the shell still inserts arguments in those places in the command that’s
# built, and ghr will fail when it sees them. This way, unwrapped, that doesn’t happen.
# I didn’t figure this out myself; I learned this here: https://stackoverflow.com/q/45950291/7012
#
# If you’re wondering why Shellcheck doesn’t suggest wrapping those args in double quotes, like I
# was, Shellcheck is smart enough to see above that those variables always have simple scalar values
# without spaces (the default shell separator) and so it “knows” that in this case double-quoting
# isn’t necessary.
~/bin/ghr -t "$GITHUB_TOKEN" \
          -u "$CIRCLE_PROJECT_USERNAME" \
          -r "$CIRCLE_PROJECT_REPONAME" \
          -c "$CIRCLE_SHA1" \
          $PRERELEASE \
          $RECREATE \
          "$TAG" \
          ~/workspace/packages
