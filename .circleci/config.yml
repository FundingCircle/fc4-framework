version: 2.1

# Some of these executors use docker images provided, maintained, and supported by CircleCI.
# Those images are documented here: https://circleci.com/docs/2.0/circleci-images/

executors:
  machine-ubuntu:
    machine:
      resource_class: large
      image: ubuntu-1604:202004-01
      docker_layer_caching: true
    environment:
      OS: debian # Close enough. This way both executors can share the same set of scripts under install-sys-deps
  openjdk-11:
    docker:
      # This image is based on Debian GNU/Linux 9 (stretch)
      # https://hub.docker.com/layers/circleci/openjdk/11-browsers/images/sha256-c5b820f7ff08cff4f0695ac63461391f570eea0eba0be202ca88e9ecc0c4ef9a
      - image: circleci/openjdk:11@sha256:c5b820f7ff08cff4f0695ac63461391f570eea0eba0be202ca88e9ecc0c4ef9a
    environment:
      OS: debian

commands:
  install-sys-deps:
    description: Installs system dependencies
    parameters:
      scenario:
        type: enum
        enum: [build, lint, run, test]
    steps:
      - run:
          name: Install system dependencies
          command: .circleci/bin/install-sys-deps/$OS-<<parameters.scenario>>

jobs:
  Test and measure coverage:
    # This job doesn’t include restore_cache or save_cache because rather than downloading
    # dependencies directly to the machine, it builds Docker images (when necessary) and then runs
    # the tests in containers using those Docker images. The executor should have Docker layer
    # caching enabled, which should serve more or less the same purpose.
    executor: machine-ubuntu
    steps:
      - checkout
      - run: .circleci/bin/halt-if-unchanged .circleci src test deps.edn
      - run: bin/tests-with-coverage
      - store_test_results: {path: target/test-results}
      - store_artifacts: {path: target/coverage}
      - run:
          name: Upload test coverage report to Codecov
          # Occasionally Codecov is down or unreachable and this step fails. If it does, we don’t
          # want the job to fail; this step is optional.
          command: bash <(curl -s https://codecov.io/bash) || echo Codecov upload failed

  Test shutdown hooks:
    executor: openjdk-11
    steps:
      - checkout
      - run: .circleci/bin/halt-if-unchanged .circleci src test deps.edn
      - restore_cache:
          keys:
            - test-deps-v3-{{checksum "deps.edn"}}-{{checksum "bin/download-test-deps"}}
      - install-sys-deps: {scenario: test}
      # This will download the tool dependencies if needed.
      - run: test/scripts/shutdown-hooks
      - save_cache:
          key: test-deps-v3-{{checksum "deps.edn"}}-{{checksum "bin/download-test-deps"}}
          paths: [.cpcache, ~/.m2, ~/.gitlibs, ~/Library/Caches/Homebrew]

  Build dist pkg:
    executor: openjdk-11
    steps:
      - checkout
      - restore_cache:
          keys:
            - pkg-deps-v1-{{checksum "deps.edn"}}-{{checksum "bin/download-pkg-deps"}}
      - install-sys-deps: {scenario: build}
      - run: bin/download-pkg-deps
      - save_cache:
          key: pkg-deps-v1-{{checksum "deps.edn"}}-{{checksum "bin/download-pkg-deps"}}
          paths: [.cpcache, ~/.m2, ~/.gitlibs]
      - run: .circleci/bin/create-dist-pkg
      - persist_to_workspace: {root: ~/workspace, paths: [packages]}
      - store_artifacts: {path: ~/workspace/packages}

  # This is commented out because it has not yet been adapted to using the on-premisis version of
  # Structurizr Express as per https://github.com/FundingCircle/fc4-framework/issues/288
  # Test dist pkg:
  #   executor: machine-ubuntu
  #   steps:
  #     - checkout
  #     - install-sys-deps: {scenario: run}
  #     - attach_workspace: {at: ~/workspace} # so we can access the distribution package that was built in Build dist pkg
  #     - run:
  #         name: Extract tool from distribution package
  #         command: tar -xzv -f ~/workspace/packages/fc4-*.tar.gz -C /tmp
  #     - run:
  #         name: Move test diagram YAML into place
  #         command: mkdir ~/test-renders && mv test/data/structurizr/express/diagram_valid_messy.yaml ~/test-renders/test-render-1.yaml
  #     - run:
  #         name: Render the diagram
  #         command: /tmp/fc4/fc4 --render ~/test-renders/*.yaml
  #     - store_artifacts: {path: ~/test-renders}

  Publish dist pkg:
    executor: openjdk-11
    steps:
      - checkout # only so we can check which paths have changed
      - attach_workspace: {at: ~/workspace}
      - restore_cache: {keys: [ghr_v0.12.2]}
      - run: .circleci/bin/install-ghr
      - save_cache:
          key: ghr_v0.12.2
          paths: [~/bin]
      - run:
          name: Create GitHub Release and upload distribution packages to it
          command: .circleci/bin/create-release

  Lint code with cljfmt:
    executor: openjdk-11
    steps:
      - checkout
      - run: .circleci/bin/halt-if-unchanged .circleci src deps.edn
      - restore_cache: {keys: ['clj-lint-deps-v1-{{checksum "deps.edn"}}']}
      - install-sys-deps: {scenario: lint}
      - run:
          name: Download deps
          command: clojure -R:lint -Stree
      - save_cache:
          key: clj-lint-deps-v1-{{checksum "deps.edn"}}
          paths: [.cpcache, ~/.m2, ~/.gitlibs]
      - run:
          name: Run cljfmt
          command: clojure -A:lint

  # Kibit is is a static code analyzer for Clojure. It searches for patterns of code that could be
  # rewritten with a more idiomatic style. https://github.com/jonase/kibit
  Lint code with kibit:
    executor: openjdk-11
    steps:
      - checkout
      - run: .circleci/bin/halt-if-unchanged .circleci src deps.edn
      - restore_cache: {keys: ['kibit-deps-v1-{{checksum "deps.edn"}}']}
      - install-sys-deps: {scenario: lint}
      - run:
          name: Download deps
          command: clojure -R:kibit -Stree
      - save_cache:
          key: kibit-deps-v1-{{checksum "deps.edn"}}
          paths: [.cpcache, ~/.m2, ~/.gitlibs]
      - run:
          name: Run kibit
          command: clojure -A:kibit

  # Eastwood is Yet Another lint tool for Clojure.
  Lint code with eastwood:
    executor: openjdk-11
    steps:
      - checkout
      - run: .circleci/bin/halt-if-unchanged .circleci src deps.edn
      - restore_cache: {keys: ['eastwood-deps-v1-{{checksum "deps.edn"}}']}
      - install-sys-deps: {scenario: lint}
      - run:
          name: Download deps
          command: clojure -R:eastwood -Stree
      - save_cache:
          key: eastwood-deps-v1-{{checksum "deps.edn"}}
          paths: [.cpcache, ~/.m2, ~/.gitlibs]
      - run:
          name: Run Eastwood
          command: clojure -A:eastwood

  Lint code with clj-kondo:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - run: .circleci/bin/halt-if-unchanged .circleci src deps.edn
      - run:
          name: Install clj-kondo
          command: |
            curl -sLO https://raw.githubusercontent.com/borkdude/clj-kondo/master/script/install-clj-kondo
            chmod +x install-clj-kondo
            sudo ./install-clj-kondo
      - run: clj-kondo --lint src deps.edn

  Lint prose:
    docker:
      - image: jdkato/vale
    steps:
      - checkout
      - run:
          name: Run Vale
          command: |
            # in this image vale is in the root of the fs and for some reason is not in the PATH
            export PATH="/:$PATH"
            bin/lint/lint-prose

  Lint markdown:
    docker:
      - image: pipelinecomponents/markdownlint:0.5.0
    steps:
      - checkout
      - run: bin/lint/lint-markdown

  Lint website HTML:
    docker:
      - image: circleci/ruby:2.6
    steps:
      - checkout
      - run: .circleci/bin/halt-if-unchanged docs
      - run:
          name: Workaround for CCI Ruby cache restore permissions bug
          # See https://github.com/dominicsayers/circleci-2.0-cache-restore/blob/master/README.md
          command: sudo chown circleci:circleci /usr/local/bundle
      - restore_cache: {keys: ['lint_site_html-v1-{{checksum "docs/Gemfile.lock"}}']}
      - run:
          name: Install gems
          command: cd docs && gem install bundler html-proofer && bundle install --jobs=4
      - save_cache:
          key: lint_site_html-v1-{{checksum "docs/Gemfile.lock"}}
          paths: [/usr/local/bundle]
      - run:
          name: Build site
          command: cd docs && bundle exec jekyll build
      - run:
          name: Check HTML
          command: |
            cd docs && htmlproofer --disable-external --assume-extension --check-html \
                                   --file-ignore //archive// _site

  Scan dependencies for vulnerabilities:
    docker:
      - image: circleci/openjdk:11.0.6-stretch-node
    steps:
      - checkout
      - restore_cache:
          keys:
            - scan-deps-snyk-v3-{{checksum "deps.edn"}}
      - run:
          name: Install Clojure (if necessary)
          command: |
            [[ -f pom.xml ]] || bin/install-clojure-linux
      - run:
          name: Install snyk
          # We install it locally so it can be cached
          command: sudo npm install snyk
      - run:
          name: Generate POM file (if necessary)
          command: |
            [[ -f pom.xml ]] || clojure -Spom
      - save_cache:
          key: scan-deps-snyk-v3-{{checksum "deps.edn"}}
          paths: [pom.xml, .cpcache, ~/.m2, ~/.gitlibs, node_modules]
      - run:
          name: Scan for vulnerabilities
          # Specifying --file here because we installed snyk here so we have a package-lock.json
          # file and we don’t want Snyk to pick up on that.
          command: node_modules/.bin/snyk test --policy-path=.circleci/snyk --file=pom.xml

workflows:
  version: 2

  Lint:
    jobs:
      - Lint prose
      - Lint markdown
      - Lint code with cljfmt
      - Lint code with clj-kondo
      - Lint code with kibit
      - Lint code with eastwood
      - Lint website HTML

  Test, package, publish:
    jobs:
      - Build dist pkg
      - Test and measure coverage
      - Test shutdown hooks
      # - Test dist pkg:
      #     requires: [Build dist pkg]
      - Publish dist pkg:
          requires:
            - Build dist pkg
            - Test and measure coverage
            # - Test dist pkg
            - Test shutdown hooks

  Security:
    jobs:
      - Scan dependencies for vulnerabilities
