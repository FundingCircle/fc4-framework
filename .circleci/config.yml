version: 2.1

# Some of these executors use docker images provided, maintained, and supported by CircleCI.
# Those images are documented here: https://circleci.com/docs/2.0/circleci-images/

executors:
  debian-11:
    docker:
      # This image is based on Debian GNU/Linux 9 (stretch)
      # https://hub.docker.com/layers/circleci/openjdk/11-browsers/images/sha256-c5b820f7ff08cff4f0695ac63461391f570eea0eba0be202ca88e9ecc0c4ef9a
      - image: circleci/openjdk:11@sha256:c5b820f7ff08cff4f0695ac63461391f570eea0eba0be202ca88e9ecc0c4ef9a
    environment:
      OS: debian
  debian-11-browsers:
    docker:
      # This image is based on Debian GNU/Linux 9 (stretch)
      # https://hub.docker.com/layers/circleci/openjdk/11-browsers/images/sha256-e00fb2b47be63574f1f0087e5cf1b0782c0926d54de5e71d0438eed28815a5cc
      - image: circleci/openjdk:11-browsers@sha256:e00fb2b47be63574f1f0087e5cf1b0782c0926d54de5e71d0438eed28815a5cc
    environment:
      OS: debian
  debian-8-browsers:
    docker:
      # This image is based on Debian GNU/Linux 9 (stretch)
      # https://hub.docker.com/layers/circleci/openjdk/8-browsers/images/sha256-101451bab2c842fe2184c5830b7f82aca4bc15760240044358ae37145b6b10ea
      - image: circleci/openjdk:8-browsers@sha256:101451bab2c842fe2184c5830b7f82aca4bc15760240044358ae37145b6b10ea
    environment:
      OS: debian
  arch:
    docker:
      # https://hub.docker.com/layers/archlinux/library/archlinux/latest/images/sha256-1097437745db73ba839d60b9b9b96e6648e62751519a1319bfccc849f6a3f74c
      - image: archlinux:20191105@sha256:1097437745db73ba839d60b9b9b96e6648e62751519a1319bfccc849f6a3f74c
    environment:
      OS: arch
  macos-mojave:
    macos:
      xcode: 11.1.0
    environment:
      OS: mac

commands:
  install-sys-deps:
    description: Installs system dependencies
    parameters:
      scenario:
        type: enum
        enum: [build, lint, run, test]
    steps:
      - run:
          name: Install system dependencies
          command: .circleci/bin/install-sys-deps/$OS-<<parameters.scenario>>
  install-arch-stuff:
    description: |
      Install stuff needed specifically for Arch Linux very early on: git so we can run
      `halt-if-unchanged` and tar so we can restore caches. This is specific to Arch because
      apparently the Arch images are very bare-bones, unlike Debian and Mac images. I suspect if we
      ever build on Alpine again we might have to do something similar.
    steps:
      - run:
          name: Install git and tar (if on Arch)
          command: |
            if command -v pacman >> /dev/null; then
              pacman --refresh --sync --needed --noconfirm --noprogressbar git tar
            fi

jobs:
  Test:
    parameters:
      executor:
        type: string
    executor: << parameters.executor >>
    steps:
      - install-arch-stuff
      - checkout
      - run: .circleci/bin/halt-if-unchanged .circleci src test deps.edn
      - restore_cache:
          keys:
            - test-deps-v2-{{checksum "deps.edn"}}-{{checksum "bin/download-test-deps"}}-<< parameters.executor >>
      - install-sys-deps:
          scenario: test
      - run: bin/download-test-deps
      - save_cache:
          key: test-deps-v2-{{checksum "deps.edn"}}-{{checksum "bin/download-test-deps"}}-<< parameters.executor >>
          paths: [.cpcache, ~/.m2, ~/.gitlibs, ~/Library/Caches/Homebrew]
      - run: bin/tests
      - store_test_results: {path: target/test-results}

  Test and measure coverage:
    parameters:
      executor:
        type: enum
        # The Debian executor is our fastest executor right now, and measuring coverage slows down
        # the tests. So we’ll hard-code this job to run on our Debian executor (for now, at least).
        # We’re keeping this as a param for now, for consistency. e.g. the param is used in the
        # deps cache key, and I wouldn’t want to hard-code that part of the key.
        enum: [debian-11-browsers]
        default: debian-11-browsers
    executor: << parameters.executor >>
    steps:
      - checkout
      - install-arch-stuff # Just in case we ever run this job on Arch; in the meantime this is a fast no-op.
      - run: .circleci/bin/halt-if-unchanged .circleci src test deps.edn
      - restore_cache:
          keys:
            - test-deps-v2-{{checksum "deps.edn"}}-{{checksum "bin/download-test-deps"}}-<< parameters.executor >>
      - install-sys-deps:
          scenario: test
      - run: bin/download-test-deps
      - save_cache:
          key: test-deps-v2-{{checksum "deps.edn"}}-{{checksum "bin/download-test-deps"}}-<< parameters.executor >>
          paths: [.cpcache, ~/.m2, ~/.gitlibs, ~/Library/Caches/Homebrew]
      - run: bin/tests-with-coverage
      - store_test_results: {path: target/test-results}
      - store_artifacts: {path: target/coverage}
      - run:
          name: Upload test coverage report to Codecov
          # Occasionally Codecov is down or unreachable and this step fails. If it does, we don’t
          # want the job to fail; this step is optional.
          command: bash <(curl -s https://codecov.io/bash) -y .circleci/codecov.yml || echo Codecov upload failed

  Test shutdown hooks:
    parameters:
      executor:
        type: string
    executor: << parameters.executor >>
    steps:
      - checkout
      - install-arch-stuff
      - restore_cache:
          keys:
            - test-deps-v2-{{checksum "deps.edn"}}-{{checksum "bin/download-test-deps"}}-<< parameters.executor >>
      - install-sys-deps: {scenario: test}
      - run: bin/download-test-deps
      - save_cache:
          key: test-deps-v2-{{checksum "deps.edn"}}-{{checksum "bin/download-test-deps"}}-<< parameters.executor >>
          paths: [.cpcache, ~/.m2, ~/.gitlibs, ~/Library/Caches/Homebrew]
      # I did a quick Web search to see if there’s a quick, simple, easy, straightforward, reliable way to
      # have bash run all the scripts in a directory, and of course there is not. Nothing is ever
      # straightforward with bash.
      - run: test/scripts/shutdown-hooks

  Build dist pkg:
    executor: debian-11
    steps:
      - checkout
      - restore_cache:
          keys:
            - pkg-deps-v1-{{checksum "deps.edn"}}-{{checksum "bin/download-pkg-deps"}}
      - install-sys-deps:
          scenario: build
      - run: bin/download-pkg-deps
      - save_cache:
          key: pkg-deps-v1-{{checksum "deps.edn"}}-{{checksum "bin/download-pkg-deps"}}
          paths: [.cpcache, ~/.m2, ~/.gitlibs]
      - run:
          name: Create distribution package
          command: |
            export GIT_HEAD_SHA=${CIRCLE_SHA1:0:7}
            export FC4_VERSION="$(date "+%Y.%m.%d")-${GIT_HEAD_SHA}" # required by build-package
            bin/build-package
            mkdir -p ~/workspace/packages
            mv target/pkg/*.gz ~/workspace/packages/
      - persist_to_workspace: {root: ~/workspace, paths: [packages]}
      - store_artifacts: {path: ~/workspace/packages}

  Test dist pkg:
    parameters:
      executor:
        type: string
    executor: << parameters.executor >>
    steps:
      - install-arch-stuff
      - checkout
      - install-sys-deps:
          scenario: run
      - attach_workspace: {at: ~/workspace} # so we can access the distribution package that was built in Build dist pkg
      - run:
          name: Extract tool from distribution package
          command: tar -xzv -f ~/workspace/packages/fc4-*.tar.gz -C /tmp
      - run:
          name: Move test diagram YAML into place
          command: mkdir ~/test-renders && mv test/data/structurizr/express/diagram_valid_messy.yaml ~/test-renders/test-render-1.yaml
      - run:
          name: Render the diagram
          command: /tmp/fc4/fc4 --render ~/test-renders/*.yaml
      - store_artifacts: {path: ~/test-renders}

  Publish dist pkg:
    executor: debian-11
    steps:
      - checkout # only so we can check which paths have changed
      - attach_workspace: {at: ~/workspace}
      - run: |
          [ "$GITHUB_TOKEN" ] || { echo 'GITHUB_TOKEN is not set!' && exit 1; }
      - restore_cache: {keys: [ghr_v0.12.2_linux_amd64]}
      - run:
          name: Download and unpack ghr
          command: |
            if [ -x ~/bin/ghr ]; then exit 0; fi
            wget https://github.com/tcnksm/ghr/releases/download/v0.12.2/ghr_v0.12.2_linux_amd64.tar.gz
            tar -xzf ghr_v0.12.2_linux_amd64.tar.gz --strip-components 1 ghr_v0.12.2_linux_amd64/ghr
            mkdir -p ~/bin
            mv ghr ~/bin/ghr
      - save_cache:
          key: ghr_v0.12.2_linux_amd64
          paths: [~/bin]
      - run:
          name: Create GitHub Release and upload distribution packages to it
          # Docs for ghr’s options: https://github.com/tcnksm/ghr/#options
          command: |
            if [[ $CIRCLE_BRANCH == "master" ]]; then
              # Tag has build num suffix in case we do multiple releases on a given day.
              GIT_HEAD_SHA=${CIRCLE_SHA1:0:7}
              VERSION="$(date "+%Y.%m.%d")-${GIT_HEAD_SHA}"
              TAG="release_${VERSION}"
            else
              # We need this to be the same across all builds for a branch so we only ever keep the
              # latest tag+release for a given branch, or we’d have way too many tags+branches.
              TAG="prerelease_${CIRCLE_BRANCH}"
            fi
            ~/bin/ghr -t $GITHUB_TOKEN \
                      -u $CIRCLE_PROJECT_USERNAME \
                      -r $CIRCLE_PROJECT_REPONAME \
                      -c $CIRCLE_SHA1 \
                      $(if [[ ! $CIRCLE_BRANCH == "master" ]]; then echo -prerelease -recreate; fi) \
                      $TAG \
                      ~/workspace/packages

  Lint code with cljfmt:
    executor: debian-11
    steps:
      - checkout
      - run: .circleci/bin/halt-if-unchanged .circleci src deps.edn
      - restore_cache: {keys: ['clj-lint-deps-v1-{{checksum "deps.edn"}}']}
      - install-sys-deps:
          scenario: lint
      - run:
          name: Download deps
          command: clojure -R:lint -Stree
      - save_cache:
          key: clj-lint-deps-v1-{{checksum "deps.edn"}}
          paths: [.cpcache, ~/.m2, ~/.gitlibs]
      - run:
          name: Run cljfmt
          command: clojure -A:lint

  # Kibit is is a static code analyzer for Clojure. It searches for patterns of code that could be
  # rewritten with a more idiomatic style. https://github.com/jonase/kibit
  Lint code with kibit:
    executor: debian-11
    steps:
      - checkout
      - run: .circleci/bin/halt-if-unchanged .circleci src deps.edn
      - restore_cache: {keys: ['kibit-deps-v1-{{checksum "deps.edn"}}']}
      - install-sys-deps:
          scenario: lint
      - run:
          name: Download deps
          command: clojure -R:kibit -Stree
      - save_cache:
          key: kibit-deps-v1-{{checksum "deps.edn"}}
          paths: [.cpcache, ~/.m2, ~/.gitlibs]
      - run:
          name: Run kibit
          command: clojure -A:kibit

  # Eastwood is Yet Another lint tool for Clojure.
  Lint code with eastwood:
    executor: debian-11
    steps:
      - checkout
      - run: .circleci/bin/halt-if-unchanged .circleci src deps.edn
      - restore_cache: {keys: ['eastwood-deps-v1-{{checksum "deps.edn"}}']}
      - install-sys-deps:
          scenario: lint
      - run:
          name: Download deps
          command: clojure -R:eastwood -Stree
      - save_cache:
          key: eastwood-deps-v1-{{checksum "deps.edn"}}
          paths: [.cpcache, ~/.m2, ~/.gitlibs]
      - run:
          name: Run Eastwood
          command: clojure -A:eastwood

  Lint prose:
    docker:
      - image: jdkato/vale
    steps:
      - checkout
      - run:
          name: Run Vale
          command: |
            # in this image vale is in the root of the fs and for some reason is not in the PATH
            export PATH="/:$PATH"
            bin/lint/lint-prose

  Lint markdown:
    docker:
      - image: pipelinecomponents/markdownlint:0.5.0
    steps:
      - checkout
      - run: bin/lint/lint-markdown

  Lint website HTML:
    docker:
      - image: circleci/ruby:2.6
    steps:
      - checkout
      - run: .circleci/bin/halt-if-unchanged docs
      - run:
          name: Workaround for CCI Ruby cache restore permissions bug
          # See https://github.com/dominicsayers/circleci-2.0-cache-restore/blob/master/README.md
          command: sudo chown circleci:circleci /usr/local/bundle
      - restore_cache: {keys: ['lint_site_html-v1-{{checksum "docs/Gemfile.lock"}}']}
      - run:
          name: Install gems
          command: cd docs && gem install bundler html-proofer && bundle install --jobs=4
      - save_cache:
          key: lint_site_html-v1-{{checksum "docs/Gemfile.lock"}}
          paths: [/usr/local/bundle]
      - run:
          name: Build site
          command: cd docs && bundle exec jekyll build
      - run:
          name: Check HTML
          command: |
            cd docs && htmlproofer --disable-external --assume-extension --check-html \
                                   --file-ignore //archive// _site

workflows:
  version: 2

  Lint:
    jobs:
      - Lint prose
      - Lint markdown
      - Lint code with cljfmt
      - Lint code with kibit
      - Lint code with eastwood
      - Lint website HTML

  Test:
    jobs:
      - Build dist pkg
      - Test:
          name: Test (Arch)
          executor: arch
      - Test and measure coverage:
          name: Test and measure coverage (Debian, Java 11)
          executor: debian-11-browsers
      - Test:
          name: Test (MacOS Mojave)
          executor: macos-mojave
      - Test shutdown hooks:
          name: Test shutdown hooks (Debian, Java 11)
          executor: debian-11-browsers
      - Test dist pkg:
          requires: [Build dist pkg]
          name: Test dist pkg (Debian, Java 11)
          executor: debian-11-browsers
      - Test dist pkg:
          requires: [Build dist pkg]
          name: Test dist pkg (Debian, Java 8)
          executor: debian-8-browsers
      - Test dist pkg:
          requires: [Build dist pkg]
          name: Test dist pkg (Arch, Java 11)
          executor: arch
      - Test dist pkg:
          requires: [Build dist pkg]
          name: Test dist pkg (MacOS, Java 8)
          executor: macos-mojave
      - Publish dist pkg:
          requires:
            - Test (Arch)
            - Test (MacOS Mojave)
            - Test and measure coverage (Debian, Java 11)
            - Test shutdown hooks (Debian, Java 11)
            - Test dist pkg (Arch, Java 11)
            - Test dist pkg (Debian, Java 11)
            - Test dist pkg (Debian, Java 8)
            - Test dist pkg (MacOS, Java 8)
